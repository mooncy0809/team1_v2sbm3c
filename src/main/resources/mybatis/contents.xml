<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="dev.mvc.contents.ContentsDAOInter"> 
<!--   <insert id="create" parameterType="dev.mvc.contents.ContentsVO">
    INSERT INTO contents(contentsno, adminno, cateno, title, content, passwd, word,
                                     file1, file1saved, thumb1, size1, rdate)
    VALUES(contents_seq.nextval, #{adminno}, #{cateno}, #{title}, #{content}, #{passwd}, #{word},
                #{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate)
  </insert> -->
  
    <!-- 연속 입력 지원 등록: sequence가 SQL 실행전에 생성되어 ContentsVO에 저장 후 사용 -->
    <insert id="create" parameterType="dev.mvc.contents.ContentsVO">
    <selectKey keyProperty="contentsno" resultType="int" order="BEFORE">
      SELECT contents_seq.nextval FROM dual
    </selectKey>
    
    INSERT INTO contents(contentsno, memberno, cateno, title, content, passwd, word, file1, file1saved, thumb1, size1, rdate, mname)
    VALUES(#{contentsno}, #{memberno}, #{cateno}, #{title}, #{content}, #{passwd}, #{word}, #{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate, #{mname})
    </insert>
    
    <!-- 일반적인 조회 -->
  <select id="read" resultType="dev.mvc.contents.ContentsVO" parameterType="int">
    SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, passwd, word, rdate, file1, file1saved, thumb1, size1, mname
    FROM contents
    WHERE contentsno = #{contentsno}
  </select>
  
  <!-- 상품 정보 변경 -->
  <update id="product_update" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents
    SET price=#{price}, dc=#{dc}, saleprice=#{saleprice}, point=#{point}, salecnt=#{salecnt}
    WHERE contentsno = #{contentsno}
  </update>
  
  <!-- 특정 카테고리의 등록된 글목록 -->
  <select id="list_by_cateno" resultType="dev.mvc.contents.ContentsVO" parameterType="int">
    SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
              file1, file1saved, thumb1, size1
    FROM contents 
    WHERE cateno = #{cateno}
    ORDER BY contentsno DESC
  </select>
  
  <!-- 카테고리별 검색 목록 -->
  <!-- 카테고리별 검색 목록 + 페이징 + 메인 이미지 -->   
  <select id="list_by_cateno_search_paging" 
             resultType="dev.mvc.contents.ContentsVO" parameterType="HashMap">
   SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
              file1, file1saved, thumb1, size1, mname, r
   FROM (
              SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
                         file1, file1saved, thumb1, size1, mname, rownum as r
              FROM (
                        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
                                   file1, file1saved, thumb1, mname, size1
                        FROM contents 
                        <choose>
                          <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
                             WHERE cateno=#{cateno}
                          </when>
                          <otherwise>
                            WHERE cateno=#{cateno} AND (UPPER(title) LIKE '%' || #{word} || '%'  <!-- ||: 결합, %첫눈% -->
                                                                  OR UPPER(content) LIKE '%' || #{word} || '%' 
                                                                  OR UPPER(word) LIKE '%' || #{word} || '%')
                          </otherwise>
                        </choose>
                        ORDER BY contentsno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
   <!--  1 page: WHERE r >= 1 AND r <= 10; 
       2 page: WHERE r >= 11 AND r <= 20;
       3 page: WHERE r >= 21 AND r <= 30; -->
     
  </select> 
   
  <!-- 카테고리별 검색 레코드 갯수 -->
  <select id="search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM contents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE cateno=#{cateno}
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE cateno=#{cateno} AND (UPPER(title) LIKE '%' || #{word} || '%' 
                                                     OR UPPER(content) LIKE '%' || #{word} || '%' 
                                                     OR UPPER(word) LIKE '%' || #{word} || '%')
      </otherwise>
    </choose>
  </select>
  
  
    <!-- 테이블 갯수의 검색 레코드 갯수 -->
  <select id="search_count2" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM contents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE 1=1
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE 1=1 AND (UPPER(title) LIKE '%' || #{word} || '%' 
                                                     OR UPPER(content) LIKE '%' || #{word} || '%' 
                                                     OR UPPER(word) LIKE '%' || #{word} || '%')
      </otherwise>
    </choose>
  </select>
  
  
  <!-- cnt가 정수이기 때문에 반환값이 int이다. -->
  <select id="passwd_check" resultType="int" parameterType="HashMap">
    SELECT count(*) as cnt
    FROM contents
    WHERE contentsno=#{contentsno} and passwd=#{passwd}
  </select>
  
  <update id="update_text" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents
    SET title=#{title}, content=#{content}, word=#{word}, price=#{price},
        dc=#{dc}, saleprice=#{saleprice}, point=#{point}, salecnt=#{salecnt}
    WHERE contentsno=#{contentsno}
  </update>
  
  <update id="update_file" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents
    SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
    WHERE contentsno = #{contentsno}
  </update>
  
  <delete id="delete" parameterType="int">
    DELETE FROM contents
    WHERE contentsno=#{contentsno}
  </delete>
  
    <!-- 특정 그룹에 속한 레코드 갯수 산출 -->
  <select id="count_by_cateno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM contents 
    WHERE cateno=#{cateno}
  </select>
  
  <!--  조회수  -->
  <update id="cnt">
    UPDATE contents 
    SET cnt = cnt + 1
    WHERE contentsno = #{contentsno}
  </update>
  
  <!-- Cate + Contents join, 연결 목록 -->
  <!-- 카테고리별 검색 목록 + 페이징 + 메인 이미지 -->   
  <select id="list_all_join" 
             resultType="dev.mvc.contents.ContentsVO" parameterType="Map">
   SELECT name, contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
              file1, file1saved, thumb1, size1, mname, r
   FROM (
              SELECT name, contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
                         file1, file1saved, thumb1, size1, mname, rownum as r
              FROM (
                        SELECT name, contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
                                   file1, file1saved, thumb1, mname, size1
                        FROM testView
                        ORDER BY contentsno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
   <!--  1 page: WHERE r >= 1 AND r <= 10; 
       2 page: WHERE r >= 11 AND r <= 20;
       3 page: WHERE r >= 21 AND r <= 30; -->
     
  </select>   
      
   <!-- 댓글 수 확인 -->
   <update id = "update_replycnt" parameterType="dev.mvc.contents.ContentsVO">
    update contents
    set replycnt = (
                        SELECT COUNT(replyno) as replycnt
                        from reply
                        where contentsno = #{contentsno}
                    )
    where contentsno = #{contentsno}
   </update>

   <!-- 댓글 수 업데이트 -->
<!--    <update id = "update_replycnt" parameterType="dev.mvc.contents.ContentsVO">
   <selectKey keyProperty="replycnt" resultType="int" order="BEFORE">
    SELECT COUNT(replyno) as replycnt
    from reply
    where contentsno = #{contentsno}
   </selectKey>
    update contents
    set replycnt = #{replycnt}
    where contentsno = #{contentsno}
   </update> -->
   
   <!-- 카테고리별 검색 목록 -->
  <!-- 카테고리별 검색 목록 + 페이징 + 메인 이미지 -->   
  <!-- <select id="notice_by_cateno_search_paging" 
             resultType="dev.mvc.contents.ContentsVO" parameterType="HashMap">
   SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
              file1, file1saved, thumb1, size1, mname, r
   FROM (
              SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
                         file1, file1saved, thumb1, size1, mname, rownum as r
              FROM (
                        SELECT contentsno, memberno, cateno, title, content, recom, cnt, replycnt, rdate,
                                   file1, file1saved, thumb1, mname, size1
                        FROM contents 
                        <choose>
                          <when test="word == null or word == ''"> 검색하지 않는 경우
                             WHERE cateno=#{cateno}
                          </when>
                          <otherwise>
                            WHERE cateno=#{cateno} AND (UPPER(title) LIKE '%' || #{word} || '%'  ||: 결합, %첫눈%
                                                                  OR UPPER(content) LIKE '%' || #{word} || '%' 
                                                                  OR UPPER(word) LIKE '%' || #{word} || '%')
                          </otherwise>
                        </choose>
                        ORDER BY contentsno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
    1 page: WHERE r >= 1 AND r <= 10; 
       2 page: WHERE r >= 11 AND r <= 20;
       3 page: WHERE r >= 21 AND r <= 30;
     
  </select>  -->
         
</mapper> 